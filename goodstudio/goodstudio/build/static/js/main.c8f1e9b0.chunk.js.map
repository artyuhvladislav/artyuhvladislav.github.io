{"version":3,"sources":["redux/calendarReducer.js","Component/Calendar/Calendar.jsx","Component/Calendar/CalendarContainer.js","redux/pictureReducer.js","Component/Picture/Picture.jsx","Component/Picture/PictureAPIComponent.jsx","Component/Picture/PictureContainer.js","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["getDateObj","d","Date","year","getFullYear","month","getMonth","day","getDate","initialState","date","undefined","window","localStorage","getItem","url","imgArray","calendarReducer","state","action","type","setItem","removeItem","Calendar","props","style","display","justifyContent","padding","value","onChange","e","target","changeDate","setUrl","CalendarContainer","connect","calendarPage","urlImg","pictureReducer","Picture","src","width","alt","PictureAPIComponent","axios","this","then","response","setPicture","data","catch","alert","message","React","Component","PictureContainer","picturePage","App","className","Boolean","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.c8f1e9b0.chunk.js","sourcesContent":["const DATE_IS_CHANGED = 'DATE_IS_CHANGED';\r\nconst URL_IS_CHANGED = 'URL_IS_CHANGED';\r\n\r\nconst  getDateObj = () => {\r\n    const d = new Date();\r\n    const year = d.getFullYear();\r\n    const month = ( d.getMonth()+1 < 10 ) ? '0'+ ( d.getMonth() + 1 ) : d.getMonth() + 1;\r\n    const day = ( d.getDate() < 10 ) ? '0'+ ( d.getDate() ) : d.getDate();\r\n    return `${year}-${month}-${day}`\r\n    \r\n}\r\nconst localDateFn = () => {\r\n    const localDate = window.localStorage.getItem('app_date');\r\n    return (localDate === undefined) ? '' : window.localStorage.getItem('app_date')\r\n}\r\n\r\nconst initialState = {date: localDateFn() , url: '', imgArray: [] };\r\n\r\n\r\nconst calendarReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case DATE_IS_CHANGED: \r\n            \r\n            window.localStorage.setItem('app_date', action.date);\r\n            if(getDateObj() === window.localStorage.getItem('app_date')){\r\n                window.localStorage.removeItem('app_date')\r\n            }\r\n            \r\n            return {\r\n                ...state,\r\n               date: action.date,\r\n               url: action.url\r\n            }\r\n\r\n        case URL_IS_CHANGED: \r\n            \r\n            return {\r\n                ...state,\r\n                url: action.url\r\n            }\r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeDate = (date,url) =>({type: DATE_IS_CHANGED, date});\r\nexport const setUrl = (url) =>({type: URL_IS_CHANGED, url});\r\n\r\nexport default calendarReducer\r\n","import React from 'react';\r\n\r\nconst Calendar = (props) => {\r\n    \r\n    const onChangeDate = (e) => {\r\n        const date = e.target.value;\r\n        props.changeDate(date);\r\n        const KEY = 'iJO5vN1kBXveLSvbgO7qkgimFb8mIuEezsjKK9nk';\r\n        let url = `https://api.nasa.gov/planetary/apod?api_key=${KEY}&date=${date}`;\r\n        props.setUrl(url);\r\n    }\r\n    \r\n    return <div style = { {display: 'flex', justifyContent: 'center', padding: '20px'} }>\r\n                <p style = { {padding: '5px'} }>Get date to see picture</p>\r\n                <input                          \r\n                        value = {props.date !== null ? props.date : ''}\r\n                        onChange = {onChangeDate} type=\"date\" />\r\n            </div>\r\n}\r\n\r\nexport default Calendar","import { connect } from \"react-redux\";\r\nimport { changeDate, setUrl } from '../../redux/calendarReducer';\r\nimport Calendar from \"./Calendar\";\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        date: state.calendarPage.date\r\n    }\r\n}\r\nconst CalendarContainer = connect(mapStateToProps, {changeDate, setUrl})(Calendar)\r\nexport default CalendarContainer","const SET_PICTURE = 'SET_PICTURE';\r\n\r\nconst localImgFn = () => {\r\n    const localImg = window.localStorage.getItem('app_img');\r\n    return (localImg === undefined) ? '' : window.localStorage.getItem('app_img')\r\n}\r\nconst initialState = {\r\n       urlImg: localImgFn()\r\n};\r\n\r\nconst pictureReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_PICTURE:\r\n            window.localStorage.setItem('app_img', action.url);\r\n            return {\r\n                ...state,\r\n                urlImg: action.url\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setPicture = (url) =>({type: SET_PICTURE, url});\r\n\r\nexport default pictureReducer","import React from 'react';\r\nconst Picture = (props) => {\r\n   \r\n    return <div>    \r\n                <h2>Picture of the day</h2>\r\n                <img src = {props.url} style={{width: '400px'}} alt=\"img\"/>\r\n            </div>\r\n}\r\nexport default Picture","import React from 'react';\r\nimport * as axios from 'axios';\r\nimport Picture from './Picture';\r\nclass PictureAPIComponent extends React.Component{\r\n    componentDidUpdate(){\r\n\r\n            axios.get(this.props.url).then(response => {\r\n                this.props.setPicture(response.data.url)\r\n            }).catch((e)=> {alert(e.message)})\r\n       \r\n    }\r\n    render(){\r\n        return (\r\n                    <Picture url={this.props.urlImg} />\r\n                )\r\n    }\r\n}\r\n\r\n\r\nexport default PictureAPIComponent","import { connect } from \"react-redux\";\r\nimport { setPicture} from '../../redux/pictureReducer';\r\nimport PictureAPIComponent from './PictureAPIComponent';\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        urlImg: state.picturePage.urlImg,\r\n        url: state.calendarPage.url\r\n    }\r\n}\r\nconst PictureContainer = connect(mapStateToProps, {setPicture})(PictureAPIComponent);\r\nexport default PictureContainer","import React from 'react';\nimport './App.css';\nimport CalendarContainer from './Component/Calendar/CalendarContainer';\nimport PictureContainer from './Component/Picture/PictureContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1>Astronomy picture of the day</h1>\n        <CalendarContainer />\n        <PictureContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers} from 'redux';\r\nimport  calendarReducer  from './calendarReducer';\r\nimport pictureReducer from './pictureReducer';\r\nconst reducers = combineReducers({\r\n    calendarPage: calendarReducer,\r\n    picturePage: pictureReducer,\r\n    \r\n})\r\n\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}